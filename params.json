{"name":"Chaiscript","tagline":"Embedded Scripting Language Designed for C++","body":"ChaiScript\r\n\r\nhttp://www.chaiscript.com\r\n\r\n(c) 2009-2012 Jason Turner and Jonathan Turner\r\n\r\nRelease under the BSD license, see \"license.txt\" for details.\r\n\r\nIntroduction\r\n============\r\n\r\nChaiScript is one of the only embedded scripting language designed from the \r\nground up to directly target C++ and take advantage of modern C++ development \r\ntechniques, working with the developer like he expects it to work.  Being a \r\nnative C++ application, it has some advantages over existing embedded scripting \r\nlanguages:\r\n\r\n1) It uses a header-only approach, which makes it easy to integrate with \r\n   existing projects.\r\n2) It maintains type safety between your C++ application and the user scripts.\r\n3) It supports a variety of C++ techniques including callbacks, overloaded \r\n   functions, class methods, and stl containers.\r\n\r\nRequirements\r\n============\r\n\r\nChaiScript requires a recent version of Boost (http://www.boost.org) to build.\r\n\r\nUsage\r\n=====\r\n\r\n* Add the ChaiScript include directory to your project's header search path\r\n* Add `#include <chaiscript/chaiscript.hpp>` to your source file\r\n* Instantiate the ChaiScript engine in your application.  For example, create \r\n  a new engine with the name `chai` like so: `chaiscript::ChaiScript chai`\r\n\r\nOnce instantiated, the engine is ready to start running ChaiScript source.  You \r\nhave two main options for processing ChaiScript source: a line at a time using \r\n`chai.eval(string)` and a file at a time using `chai.eval_file(fname)`\r\n\r\nTo make functions in your C++ code visible to scripts, they must be registered \r\nwith the scripting engine.  To do so, call add:\r\n\r\n    chai.add(chaiscript::fun(&my_function), \"my_function_name\");\r\n\r\nOnce registered the function will be visible to scripts as \"my_function_name\"\r\n\r\nExamples\r\n========\r\n\r\nChaiScript is similar to ECMAScript (aka JavaScript(tm)), but with some \r\nmodifications to make it easier to use.  For usage examples see the \"samples\" \r\ndirectory, and for more in-depth look at the language, the unit tests in the \r\n\"unittests\" directory cover the most ground.\r\n\r\nFor examples of how to register parts of your C++ application, see \r\n\"example.cpp\" in the \"src\" directory. Example.cpp is verbose and shows every \r\npossible way of working with the library. For further documentation generate \r\nthe doxygen documentation in the build folder or see the website \r\nhttp://www.chaiscript.com.\r\n\r\n\r\nThe shortest complete example possible follows:\r\n\r\n    /// main.cpp\r\n\r\n    #include <chaiscript/chaiscript.hpp>\r\n\r\n    double function(int i, double j)\r\n    {\r\n      return i * j;\r\n    }\r\n\r\n    int main()\r\n    {\r\n      chaiscript::ChaiScript chai;\r\n      chai.add(chaiscript::fun(&function), \"function\");\r\n\r\n      double d = chai.eval<double>(\"function(3, 4.75);\");\r\n    }\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}